// Yuri Archive
// Copyright (C) 2025 1vers1on

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.

// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

generator client {
    provider        = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Yuri {
    id       String    @id
    filename String
    rating   String
    source   String @db.Text
    artist   String @db.Text
    tags     YuriTag[]
    favorites Favorite[]
}

model Tag {
    id    Int       @id @default(autoincrement())
    tag   String    @unique
    posts YuriTag[]
}

model YuriTag {
    yuri   Yuri   @relation(fields: [yuriId], references: [id])
    yuriId String

    tag   Tag @relation(fields: [tagId], references: [id])
    tagId Int

    @@id([yuriId, tagId])
}

model Guestbook {
  id        Int      @id @default(autoincrement())
  name      String
  email     String?
  website   String?
  message   String
  createdAt DateTime @default(now())
}

enum Role {
    USER
    ADMIN
    OWNER
}

model RefreshToken {
    id        Int      @id @default(autoincrement())
    token     String   @unique
    expires   DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    valid     Boolean  @default(true)
    
    user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    Int

    @@index([userId])
}

model Users {
    id        Int      @id @default(autoincrement())
    username  String   @unique
    email     String?
    password  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    role      Role     @default(USER)
    favorites Favorite[]
    refreshTokens RefreshToken[]
}

model Favorite {
    user    Users @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  Int
    
    yuri    Yuri  @relation(fields: [yuriId], references: [id], onDelete: Cascade)
    yuriId  String
    
    createdAt DateTime @default(now())

    @@id([userId, yuriId])
}
